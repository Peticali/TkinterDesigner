from tkinter import *
from tkinter.filedialog import askopenfilename
from tkinter import colorchooser
from pathlib import Path
from tkfontchooser import askfont
from os import system 
import sys
from threading import Thread

this = sys.modules[__name__] #for getattr() global

class app():
    
    def attachProperties(self):

        self.propertiesDetach = 0

        '''for child in self.container.winfo_children():
            child.destroy()
        self.container.destroy()'''

        self.propertiesWindow.destroy()
        self.detach.place(x=640,y=150)

        self.container = Frame(self.janela,bg = '#242526',highlightbackground="#FFFFFF",highlightthickness=1)
        self.container.place(x=500,y=180,height=210,width=197) #coloca na janela

        canvas = Canvas(self.container,bg = '#242526')
        canvas.place(x=0,y=0,height=210,width=180) #canvas para controle y dentro do container

        scrollbar = Scrollbar(self.container, orient="vertical", command=canvas.yview) 
        scrollbar.pack(side="right", fill="y") #criando a scroll bar dentro do container

        self.FrameProperties = Frame(canvas,bg = '#242526') #frame dentro do canvas q vai ter todas propriedades

        self.FrameProperties.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )

        canvas.create_window((0, 0), window=self.FrameProperties, anchor="nw")

        canvas.configure(yscrollcommand=scrollbar.set) #define a scrollbar como a pos y do canvas

        self.createProperties(window=self.FrameProperties,windowString="self.FrameProperties")
        
        


    def propertyDetach(self):
        
        self.propertiesDetach = 1

        for child in self.container.winfo_children():
            child.destroy()

        self.container.destroy()

        self.detach.place_forget()
            
        self.propertiesWindow = Tk()

        screen_width = self.propertiesWindow.winfo_screenwidth()
        screen_height = self.propertiesWindow.winfo_screenheight()

        screen_width = str(screen_width - 200)
        screen_height = '0'

        self.propertiesWindow.geometry("200x500+" +screen_width + '+' + screen_height)

        self.container = Frame(self.propertiesWindow,bg = '#242526',highlightbackground="#FFFFFF",highlightthickness=1)
        self.container.place(x=0,y=0,width=197,height=500) #coloca na janela

        canvas = Canvas(self.container,bg = '#242526')
        canvas.place(x=0,y=0,height=500,width=180) #canvas para controle y dentro do container

        scrollbar = Scrollbar(self.container, orient="vertical", command=canvas.yview) 
        scrollbar.pack(side="right", fill="y") #criando a scroll bar dentro do container

        self.FrameProperties = Frame(canvas,bg = '#242526') #frame dentro do canvas q vai ter todas propriedades

        self.FrameProperties.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )

        canvas.create_window((0, 0), window=self.FrameProperties, anchor="nw")

        canvas.configure(yscrollcommand=scrollbar.set) #define a scrollbar como a pos y do canvas

        self.propertiesWindow.protocol("WM_DELETE_WINDOW", self.attachProperties)

        self.createProperties(window=self.FrameProperties,windowString="self.FrameProperties")


    


    def getObjectsExport(self):
        
        countScript = 0
        code = """from tkinter import * 

class app(): #NOT DELETE ANY COMMENTS GENERATED BY THE PROGRAM."""


        scriptCount = len(self.objScripts)


        for countScript in range(scriptCount):
        #while countScript < scriptCount:
            widgetName = list(self.objScripts.keys())[countScript]
            widgetScript = self.objScripts[widgetName]
            widgetScript = '        '.join(('\n'+widgetScript.lstrip()).splitlines(True))

            StrFunction = '    def ' + widgetName + '(self):\n'
            StrFunction = StrFunction  + widgetScript

            print(StrFunction)
            #countScript = countScript + 1
            code = code + '\n' + StrFunction + "\n" + "\t\t#endFunction\n"

        code = code +"""
    def __init__(self):
        self.root = Tk()
        """

        code = code + "\n" + "        self.root.title('" + self.windowTitle + "')\n"
        code = code + "        self.root.config(bg='" + self.windowBG + "')\n        "

        frameL = self.frameDesigner.winfo_width()
        frameA = self.frameDesigner.winfo_height()
        framesize = "self.root.geometry('" + str(frameL) + "x" + str(frameA) + "')\n\n\t\t#init Objects"

        code = code + framesize


        count = 0
        lista = self.listObjectsGUI.get(0,END)
        size = len(lista)
        for count in range(size):
        #while count < size: #pega todas as propriedades de todos objetos na tela
            widget = lista[count]
            #print(widget)

            typee = self.objs[widget].winfo_class() 
        
            string = typee+ "(self.root,"

            x = self.objs[widget].winfo_rootx() - self.frameDesigner.winfo_rootx()
            y = self.objs[widget].winfo_rooty() - self.frameDesigner.winfo_rooty()


            for property in self.objs[widget].keys():
                
                if property == "command":
                    try:
                        widgetScript = self.objScripts[widget]
                        string = string + property + '=' +  "self." + widget + ','
                    except:
                        value = self.objs[widget].cget(property)
                        string = string + property + '=' +  "'" + str(value) + "'" + ','
                    
                elif property == "class":
                    pass
                else:
                    value = self.objs[widget].cget(property)#only export value if is different than original 
                    
                    if getattr(this,typee)()[property] != value:
                        string = string + property + '=' +  "'" + str(value) + "'" + ','

            
            height = self.objs[widget].winfo_height()
            width = self.objs[widget].winfo_width()

            string = "        " + 'self.' + widget + " = " + string[:-1] + ')\n'  
            string = string + "        " + 'self.' + widget + ".place(x=" + str(x) + ',y=' + str(y) +  ",height=" + str(height) + ",width=" + str(width) + ')'


            code = code + "\n" + string

            #count = count + 1

        exportinit =  '        '.join(('\n'+self.initScript.lstrip()).splitlines(True))
        code = code + "\n\t\t#close Objects\n\n" + exportinit + "\n        self.root.mainloop()"
        code = code + "\napp = app()"

        try:
            file = open(self.homeDir + "/Desktop/code.py", "w")
            n = file.write(code)
            file.close()
        except:
            pass

        self.codeExported = code
        
        run = Thread(target=self.runWindow)
        run.setDaemon(True)
        run.start()

        
        
    def runWindow(self):

        if self.chooseInterpreter.get() == 1:
            
            path = sys.executable + " " + '"'+ self.homeDir + "/Desktop/code.py" + '"'
            system(path)
        else:
            exec(self.codeExported)



    def importProject(self):
        countWidgets = 0
        countImportar = 1
        
        countWidgetLine = 1

        countPlaceLine = 2

        path = askopenfilename()

        file = open(path, "r")
        f = file.read()
        file.close()

        initScript = f
        windowProps = f

        #print(windowProps)


        title = windowProps.split("self.root.title('")[1]
        title = title.split("')")[0]

        self.windowTitle = title

        bg = windowProps.split("self.root.config(bg='")[1]
        bg = bg.split("')")[0]

        self.frameDesigner.config(bg=bg)

        self.windowBG = bg

        size = windowProps.split("self.root.geometry('")[1]
        size = size.split("')")[0]

        size = size.split("x")

        width = size[0]
        height = size[1]

        self.frameDesigner.config(width=width,height=height)


        f = f.split("#init Objects")[1]
        f = f.split("#close Objects")[0]

        self.listObjectsGUI.delete(0,'end')


        for child in self.frameDesigner.winfo_children():
            if child != self.labelMove:
                if child != self.ResizeObjW:
                
                    child.destroy()


        for line in f:
            if line == "\n":
                countWidgets = countWidgets + 1

        countWidgets = countWidgets - 1
        countWidgets = countWidgets /2


        f = f.replace("self.root"," ")

        lines = f.split("\n")
        
        


        rootScript = initScript.split("#this script will execute after all widgets are created.")[1]
        rootScript = rootScript.split("self.root.mainloop()")[0]

        
        
        count = 1
        stringFunc = ""
        function = rootScript.split("\n")

        size = len(function)

        while count < size:
            stringFunc = stringFunc + "\n" +  str(function[count])[8:]

            #print(function[count])

            count = count + 1
            
        

        stringFunc = stringFunc[:stringFunc.rfind('\n')]




        rootScript = "#this script will execute after all widgets are created." + stringFunc

        self.initScript = rootScript
        
        
        
        print(rootScript)


        while countImportar <= countWidgets :

            lineObject = lines[countWidgetLine] #ler o objeto (o primeiro é em linha 1)

            linePlace = lines[countPlaceLine] #ler o place do objeto


            widgetName = linePlace.split("self.")[1]
            widgetName = widgetName.split(".")[0]

            tipo = lineObject.split(" ")[10]
            tipo = tipo.split("(")[0]

            placex = linePlace.split("=")[1]
            placex = placex.split(",")[0]

            placey = linePlace.split("=")[2]
            placey = placey.split(",")[0]

            height = linePlace.split("=")[3]
            height = height.split(",")[0]

            width = linePlace.split("=")[4]
            width = width.split(",")[0]

            width = width[:-1]


            widgetproperties = lineObject.split("(")[1]
            widgetproperties = widgetproperties.split(")")[0]

            widgetproperties = widgetproperties.replace("=",":")
            
            propertiesToProcess = 1

            propertyDict = {}

            for char in widgetproperties:
                if char == ',':
                    
                    propertie = widgetproperties.split(",")[propertiesToProcess]
                    propertie = propertie.split(",")[0]

                    propertyName = propertie.split(":")[0]
                    
                    try:
                        propertyValue = propertie.split("'")[1]
                        
                        if propertyName == "command":
                            print(widgetName,"n tem script")
                    except:
                        propertyValue = ""

                        if propertyName == "command":
                            print(widgetName,"TEM SCRIPT")

                            file = open(path, "r")
                            string = file.read()
                            file.close()

                            func = string.split("def " + widgetName + "(self):\n\n")[1]

                            func = func.split("#endFunction")[0]
                            
                            #function = ""
                            count = 0
                            stringFunc = ""
                            function = func.split("\n")

                            size = len(function)

                            while count < size:
                                stringFunc = stringFunc + "\n" +  str(function[count])[8:]

                                #print(function[count])

                                count = count + 1
                                
                            
                            stringFunc = stringFunc.split("\n",1)[1]

                            stringFunc = stringFunc[:stringFunc.rfind('\n')]

                            
                            print(stringFunc)


                            self.objScripts[widgetName] = stringFunc
                    
                    propertyDict[propertyName] = propertyValue
                    
                    propertiesToProcess = propertiesToProcess + 1

            #print(propertyDict)

            
            self.objs[widgetName] = getattr(this,tipo)(self.frameDesigner,propertyDict)
            self.objs[widgetName].place(x=placex,y=placey,width=width,height=height)
            
            self.listboxIndex = self.listboxIndex + 1
            self.listObjectsGUI.insert(self.listboxIndex,widgetName)


            countPlaceLine = countPlaceLine +2
            countWidgetLine = countWidgetLine +2


            countImportar = countImportar + 1#proximo obj
        self.clickFrame(event=None)




    def deleteComponent(self):
        self.objs[self.objectSelected].destroy()
        index = self.listObjectsGUI.get(0, END).index(self.objectSelected)
        self.listObjectsGUI.delete(index)

        self.labelMove.place_forget()
        self.ResizeObjW.place_forget()

        try:
            self.objScripts.pop(self.objectSelected)
        except:
            pass
        self.deletePropertys()


    def deletePropertys(self):
        count = 0
        size = len(self.propertys)
        for count in range(size):
            x = list(self.propertys.keys())[count]
            try:
                self.propertys[x].destroy()
            except:
                pass



    def apply(self):
        if self.objectSelected != "root":
            self.applyObj()
        else:
            #print(self.propertys)
            self.windowTitle = self.propertys["Entrytitle"].get()
            
            bg = self.propertys["Entrybg"].get()
            width = self.propertys["Entrywidth"].get()
            height = self.propertys["Entryheight"].get()

            self.windowBG = bg

            self.frameDesigner.config(bg=bg,width=width,height=height)


    def applyObj(self):

        size = len(self.propertys)
        for count in range(size):
        #while size > count:
            x = list(self.propertys.keys())[count]
            try:
                get = self.propertys[x].get()
                config = {}
                x = x.split("Entry")[1]
                config[x] = get
                self.objs[self.objectSelected].config(config)

            except:
                pass



    def addScriptToWidget(self):
        script = self.script.get('1.0', 'end-1c')
        if script == "":
            try:
                del self.objScripts[self.objectSelected]
            except:
                pass

        else:
            self.objScripts[self.objectSelected] = script
        self.scripter.destroy()


    def setInitString(self):
        script = self.script.get('1.0', 'end-1c')
        self.initScript = script
        self.scripter.destroy()


    def getPropertysScripter(self,event):
        self.objectTempSelected = self.objectSelected

        self.objectSelected = self.listObjectsPropChooser.get(self.listObjectsPropChooser.curselection())
        print(self.objectSelected)
        self.createProperties(window=self.FramePropertiesChoose,windowString="self.FramePropertiesChoose")

    def getLabelPushed(self,event):
        caller = "self." + self.objectSelected + ".config(" + event.widget.cget("text") + "="
        print(caller)

        self.objectSelected = self.objectTempSelected
        
        self.script.insert(INSERT,caller)

        self.chooseProperty.destroy()


    def scriptBoxGetPropertyWindow(self):
        self.chooseProperty = Tk()
        self.listObjectsPropChooser = Listbox(self.chooseProperty,bg = '#242526',fg='white')
        self.listObjectsPropChooser.place(x=0,y=0,width=180)

        self.chooseProperty.geometry("185x390")
        self.chooseProperty.config(bg="#242526")

        values = self.listObjectsGUI.get(0,END)

        index = 1
        for key in values:
            self.listObjectsPropChooser.insert(index, key)
            index = index + 1

        container = Frame(self.chooseProperty,bg = '#242526',highlightbackground="#FFFFFF",highlightthickness=1)
        container.place(x=0,y=180,height=200,width=180) 

        canvas = Canvas(container,bg = '#242526')
        canvas.place(x=0,y=0,width=180) 

        scrollbar = Scrollbar(container, orient="vertical", command=canvas.yview) 
        scrollbar.pack(side="right", fill="y") 

        self.FramePropertiesChoose = Frame(canvas,bg = '#242526') 
        self.FramePropertiesChoose.bind("<Configure>",lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

        canvas.create_window((20, 0), window=self.FramePropertiesChoose, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set) 
        self.listObjectsPropChooser.bind('<ButtonRelease-1>',self.getPropertysScripter)


    def createScriptBox(self,property):
        self.scripter = Tk()

        self.scripter.geometry("620x430")
        self.scripter.config(bg="#242526")
        self.scripter.title(self.objectSelected + ' OnClick Function')

        self.script = Text(self.scripter,bg="#242526",fg="white")
        self.script.pack()

        chooseProperty = Button(self.scripter,text="Choose WidgetProp",command=self.scriptBoxGetPropertyWindow)
        chooseProperty.pack(side=LEFT)

        if property != "commandRoot":

            try:
                scriptExistent = self.objScripts[self.objectSelected]
                self.script.insert(INSERT,scriptExistent)
            except:
                pass
            

            concluir = Button(self.scripter,text="concluir",command=self.addScriptToWidget)
            concluir.pack(side=RIGHT)

        else:
            scriptExistent = self.initScript
            self.script.insert(INSERT,scriptExistent)
            concluir = Button(self.scripter,text="concluir",command=self.setInitString)
            concluir.pack(side=RIGHT)


        self.scripter.mainloop()


    def setEntryFont(self,property):
        dictio= self.prop[property]
        entry = dictio.split(",")[0]
        button = dictio.split(",")[1]
        font = askfont(self.janela)
        print(font)

        if font != "":
            FontFamily = font["family"].replace(" ","")
            stringFont = FontFamily + " " + str(font["size"]) + " " + font["weight"]
            self.propertys[entry].delete(0,END)
            self.propertys[entry].insert(0,stringFont)

            self.apply()


    def setEntryColor(self,property):

        dictio= self.prop[property]
        entry = dictio.split(",")[0]
        button = dictio.split(",")[1]

        color_code = colorchooser.askcolor(title ="Color")[1]
        
        print(color_code)

        if color_code != None:
            self.propertys[entry].delete(0,END)
            self.propertys[entry].insert(0,color_code)
            self.propertys[button].config(fg=color_code)
            self.apply()


    def createProperties(self,window,windowString):
        btnProperties = []
        if self.objectSelected != "root":

            for item in self.objs[self.objectSelected].keys():
                btnProperties.append(item)

        else:
            btnProperties.append("title")
            btnProperties.append("bg")
            btnProperties.append("width") 
            btnProperties.append("height")         
            btnProperties.append("command")
        
        properties = btnProperties
        self.prop = {}

        remove = ['class','background','foreground']

        for i in range(len(remove)):
            try:
                properties.remove(remove[i])
            except:
                pass

        propertyCount = len(properties)

        self.deletePropertys()

        for count in range(propertyCount):
        #while count < propertyCount:
            width = 14

            propertyName = properties[count]
            propertyLabel = "Label" + propertyName
            propertyEntry = "Entry" + propertyName

            labelText = properties[count]

            if len(labelText) > 12:
                labelText = labelText[:11] + "..."


            if self.objectSelected != "root":
                x = self.objs[self.objectSelected].cget(propertyName)
            else:
                
                try:
                    if propertyName == "title":
                        x = self.windowTitle

                    else:
                    
                        x = self.frameDesigner.cget(propertyName)
                
                except:
                    x = ""
            

            if windowString != "self.FramePropertiesChoose":
                self.propertys[propertyLabel] = Label(window,text=labelText,bg="#242526",fg='white')
                self.propertys[propertyLabel].grid(column=0,row=count)
            

                if propertyName == "bg" or "fg" or "font" or "command":
                    
                    btn = propertyName + 'Button'
                    self.prop[propertyName] = propertyEntry + ',' + btn
                    
                
                    if propertyName == "bg":
                        self.propertys[btn] = Button(window,fg=x,text='..',command=lambda:[app.setEntryColor(self,'bg')])
                        self.propertys[btn].grid(column=2,row=count)
                    
                    if propertyName == "fg":
                        self.propertys[btn] = Button(window,fg=x,text='..',command=lambda:[app.setEntryColor(self,'fg')])
                        self.propertys[btn].grid(column=2,row=count)

                    if propertyName == "font":
                        self.propertys[btn] = Button(window,bg="white",text='..',command=lambda:[app.setEntryFont(self,'font')])
                        self.propertys[btn].grid(column=2,row=count)

                    if propertyName == "command":
                        if self.objectSelected != "root":

                            self.propertys[btn] = Button(window,bg="white",text='onClick',command=lambda:[app.createScriptBox(self,'command')])
                            self.propertys[btn].grid(column=1,row=count)
                        else:
                            self.propertys[btn] = Button(window,bg="white",text='onClick',command=lambda:[app.createScriptBox(self,'commandRoot')])
                            self.propertys[btn].grid(column=1,row=count)

                
                if propertyName != "command":
                    self.propertys[propertyEntry] = Entry(window,width=width)
                    self.propertys[propertyEntry].grid(column=1,row=count)
                    self.propertys[propertyEntry].insert(0,x)
                        
            
            else:
                btn = propertyName + 'LabelChooseProp'
                self.propertys[btn] = Label(window,bg="#242526",text=propertyName,fg="white")
                self.propertys[btn].grid(column=0,row=count)
                self.propertys[btn].bind("<Button-1>", self.getLabelPushed)


    def listboxCall(self,event):
        
        try:
            self.objectSelected = self.listObjectsGUI.get(self.listObjectsGUI.curselection())
            self.selectionIndex = self.listObjectsGUI.curselection()[0]
            print(self.objectSelected)

            x = self.objs[self.objectSelected].winfo_rootx() - self.frameDesigner.winfo_rootx()
            y = self.objs[self.objectSelected].winfo_rooty() - self.frameDesigner.winfo_rooty()

            self.labelMove.place(x=x,y=y-20) 

            x = self.objs[self.objectSelected].winfo_rootx() - self.frameDesigner.winfo_rootx() + self.objs[self.objectSelected].winfo_width() 
            y = self.objs[self.objectSelected].winfo_rooty() - self.frameDesigner.winfo_rooty() + self.objs[self.objectSelected].winfo_height() 

            self.ResizeObjW.place(x=x+5,y=y+5)

            self.createProperties(window=self.FrameProperties,windowString="self.FrameProperties")
        except:
            pass


    def moveObj(self,event):
        self.soltar = 0
        try:
            self.labelMove.tkraise()
            self.ResizeObjW.tkraise()
        except:
            pass

        if event.widget.cget("text") == "MOVE":

            
            while self.soltar == 0:
                x = self.frameDesigner.winfo_pointerx() - self.frameDesigner.winfo_rootx() - self.objs[self.objectSelected].winfo_width() / 2
                y = self.frameDesigner.winfo_pointery() - self.frameDesigner.winfo_rooty() - self.objs[self.objectSelected].winfo_height() / 2
                
                xRes = self.frameDesigner.winfo_pointerx() - self.frameDesigner.winfo_rootx() + self.objs[self.objectSelected].winfo_width() /2
                yRes = self.frameDesigner.winfo_pointery() - self.frameDesigner.winfo_rooty() + self.objs[self.objectSelected].winfo_height() / 2

                self.objs[self.objectSelected].place(x=x,y=y)
                
                self.labelMove.place(x=x,y=y-20)
                
                self.ResizeObjW.place(x=xRes+5,y=yRes+5)

                self.janela.update()
        
        
        if event.widget.cget("text") == ">":
            xStatic = self.frameDesigner.winfo_pointerx() - self.frameDesigner.winfo_rootx() - self.objs[self.objectSelected].winfo_width() #/ 2
            yStatic = self.frameDesigner.winfo_pointery() - self.frameDesigner.winfo_rooty() - self.objs[self.objectSelected].winfo_height() #/ 2
            
            self.labelMove.place(x=xStatic,y=yStatic-20)

            while self.soltar == 0:
                x = self.frameDesigner.winfo_pointerx() - self.frameDesigner.winfo_rootx() #-  #/ 2
                y = self.frameDesigner.winfo_pointery() - self.frameDesigner.winfo_rooty() #- self.objs[self.objectSelected].winfo_height() #/ 2

                x = x - xStatic
                y = y - yStatic

                self.objs[self.objectSelected].place(x=xStatic,y=yStatic,height=y,width=x)

                x = self.frameDesigner.winfo_pointerx() - self.frameDesigner.winfo_rootx() #- self.objs[self.objectSelected].winfo_width() / 2
                y = self.frameDesigner.winfo_pointery() - self.frameDesigner.winfo_rooty() #- self.objs[self.objectSelected].winfo_height() / 2

                self.ResizeObjW.place(x=x,y=y)

                self.janela.update()



    def createComponent(self,value):
        
        centerx = self.frameDesigner.winfo_width() / 2
        centery = self.frameDesigner.winfo_height() / 2

        self.countButton = self.countButton + 1
        name = value + str(self.countButton)

        #self.objs[name] = globals()[value](self.frameDesigner) globals() retrieve all functions, etc, slower than getattr
        self.objs[name] = getattr(this,value)(self.frameDesigner)
        if 'text' in self.objs[name].keys():
            self.objs[name].configure(text='Text')
        self.objs[name].place(x=centerx,y=centery)
        
        self.listboxIndex = self.listboxIndex + 1

        self.listObjectsGUI.insert(self.listboxIndex,name)

        
    def soltar(self,event):
        self.soltar = 1

    def clickFrame(self,event):
        self.labelMove.place_forget()
        self.ResizeObjW.place_forget()
        self.objectSelected = "root"
        self.createProperties(window=self.FrameProperties,windowString="self.FrameProperties")

    def resizeWindow(self,event):

        height = self.janela.winfo_height()
        width = self.janela.winfo_width()

        listboxPosx = width - 124

        self.listObjectsGUI.place(x=listboxPosx,y=0)

        controlsWidgetOffset = 73
        self.exportButton.place(x=listboxPosx-controlsWidgetOffset)
        self.deleteButton.place(x=listboxPosx-controlsWidgetOffset)
        self.RenameButton.place(x=listboxPosx-controlsWidgetOffset)
        self.CopyButton.place(x=listboxPosx-controlsWidgetOffset)

        propertiesBoxY =  height - 210 
        propertiesBoxX = width - 197
        self.applyButton.place(x=propertiesBoxX+75,y=propertiesBoxY+182)

        
        
        if self.propertiesDetach == 0:
            self.container.place(x=propertiesBoxX,y=propertiesBoxY-30)
            self.detach.place(x=propertiesBoxX+145,y=propertiesBoxY+182)
            

        #print(height,width)

    def Copy(self,e): #ainda precisa arrumar

        print("COPY")

        self.countButton = self.countButton + 1
        self.listboxIndex = self.listboxIndex + 1

        centerx = self.frameDesigner.winfo_width() / 2
        centery = self.frameDesigner.winfo_height() / 2

        newObjName = self.objectSelected + "Copy" + str(self.countButton)
        newObjType = self.objs[self.objectSelected].winfo_class()

        width = self.objs[self.objectSelected].winfo_width()
        height = self.objs[self.objectSelected].winfo_height()

        self.objs[newObjName] = getattr(this,newObjType)(self.frameDesigner)

        self.objs[newObjName].place(x=centerx,y=centery,height=height,width=width)

        copyProperties = {}

        for propertie in self.objs[self.objectSelected].keys():
            value = self.objs[self.objectSelected].cget(propertie)
            copyProperties[propertie] = value

        self.objs[newObjName].config(copyProperties)

        
        try:
            script = self.objScripts[self.objectSelected]
            self.objScripts[newObjName] = script
        except:
            pass
            

        self.listObjectsGUI.insert(self.listboxIndex,newObjName)


    def RenameWidget(self):
        newName = self.inputRename.get()
        newName = newName.replace(" ","")

        try:
            x = self.objs[newName]
            self.labelRename.config(text="THIS WIDGET ALREADY EXISTS")
            #verifica se o objeto ja existe na lista, se n existir vai dar erro e vai continuar a programação, se existir n vai renomear nd
        except:  

            if newName != "root":
                self.objs[newName] = self.objs.pop(self.objectSelected)
                self.listObjectsGUI.delete(self.selectionIndex)
                self.listObjectsGUI.insert(self.selectionIndex,newName)
                self.renameWindow.destroy()
            else:
                self.labelRename.config(text="THIS WIDGET ALREADY EXISTS")

        
    def renameWidgetWindow(self):
        
        if self.objectSelected != "root":
            self.renameWindow = Tk()
            self.renameWindow.config(bg="#242526")
            self.renameWindow.title("Rename")

            self.labelRename = Label(self.renameWindow, text="New Name for " + self.objectSelected + ":",bg="#242526",fg="white")
            self.labelRename.pack(fill='x',side="top")

            RenameButton = Button(self.renameWindow,text="Rename",command=self.RenameWidget,bg="#242526",fg="white")
            RenameButton.pack(fill='x',side="bottom")

            self.inputRename = Entry(self.renameWindow,width=30,bg="#242526",fg="white")
            self.inputRename.pack(fill='x',side="bottom")


    def about(self):
        janelaAbout = Tk()
        janelaAbout.config(bg="black")
        janelaAbout.title("About")

        style= {"bg":"black","fg":"white"}

        label = Label(janelaAbout,style,text="Private Beta Test 1")
        label.pack()
        label = Label(janelaAbout,style,text="https://github.com/Peticali/TkinterDesigner")
        label.pack()
        label = Label(janelaAbout,style,text="Tk Designer By Peticali")
        label.pack()


    def ThreadCommand(self,command):
        system(command)

    def initComp(self,pill,mode):
        self.chooseMode.destroy()
        print(pill,mode)

        command = "python -m " + pill

        if mode == "Onefile" and pill == "PyInstaller":
            command = command + ' --noconfirm --onefile --windowed "' + self.homeDir + '\Desktop\code.py"'

        if mode == "Directory" and pill == "PyInstaller":
            command = command + ' --noconfirm --onedir --windowed "' + self.homeDir + '\Desktop\code.py"'

        if mode == "Onefile" and pill == "Nuitka":
            command = 'python -m nuitka --jobs=2 --mingw64 --standalone --onefile --windows-disable-console --windows-company-name=TkDesignerPeticali --windows-product-version=1 --windows-product-name=TkDesignerProgram --windows-product-version=1 --plugin-enable=tk-inter "' + self.homeDir + '\Desktop\code.py"'

        if mode == "Directory" and pill == "Nuitka":
            command = 'python -m nuitka --jobs=2 --standalone --mingw64 --windows-disable-console --plugin-enable=tk-inter "' + self.homeDir + '\Desktop\code.py"'


        #print(command)

        threadBuild = Thread(target=lambda:[app.ThreadCommand(self,command=command)])
        threadBuild.setDaemon(True)
        threadBuild.start()


    def chooseCompileMethod(self,pill):
        self.compilerWindow.destroy()
        
        self.chooseMode = Tk()
        self.chooseMode.title("Choose")
        self.chooseMode.config(bg="black")
        style= {"bg":"black","fg":"white"}

        label = Label(self.chooseMode,style,text="Blue Pill or Red Pill?")
        label.pack()
        label1 = Label(self.chooseMode,style,text="Onefile",fg="blue")
        label1.pack()
        label2 = Label(self.chooseMode,style,text="Directory",fg="red")
        label2.pack()

        label1.bind('<Button-1>', lambda event:[app.initComp(self,pill=pill,mode="Onefile")])
        label2.bind('<Button-1>', lambda event:[app.initComp(self,pill=pill,mode="Directory")])
        


    def compilerWindow(self):
        self.compilerWindow = Tk()
        self.compilerWindow.config(bg="black")
        self.compilerWindow.title("About")


        style= {"bg":"black","fg":"white"}

        label = Label(self.compilerWindow,style,text="Blue Pill or Red Pill?")
        label.pack()
        label1 = Label(self.compilerWindow,style,text="PyInstaller",fg="blue")
        label1.pack()
        label2 = Label(self.compilerWindow,style,text="Nuitka",fg="red")
        label2.pack()
    

        label = Label(self.compilerWindow,style,text="(you need to pip install nuitka or pyinstaller)")
        label.pack(side=BOTTOM)

        label1.bind('<Button-1>', lambda event:[app.chooseCompileMethod(self,pill="PyInstaller")])
        label2.bind('<Button-1>', lambda event:[app.chooseCompileMethod(self,pill="Nuitka")])
        

    def __init__(self):
        self.janela = Tk()
        self.janela.title("TkDesigner")
        self.janela.configure(bg='#18191A')
        self.janela.geometry("772x418")

        self.homeDir = str(Path.home())
        
        self.propertiesDetach = 0
        self.countButton = 0

        self.objs = {}
        self.propertys = {}
        self.objScripts = {}
        self.initScript = "#this script will execute after all widgets are created."

        self.windowTitle = "Tk Created by https://github.com/Peticali/TkinterDesigner"

        
        #Colors
        styleButtons = {"bg":"#242526", "fg":"white","relief":"groove","borderwidth":2}
        styleFrames = {"bg": "#242526"}


        #Widgets Buttons
        createButtonsFrame = Frame(self.janela,styleFrames)
        createButtonsFrame.grid(column=0,row=0)
        
        createButton = Button(createButtonsFrame,styleButtons,text='Open',command=self.importProject)
        createButton.grid(column=0,row=0)

        createButton = Button(createButtonsFrame,styleButtons,text='Label',command=lambda:[app.createComponent(self,value='Label')])
        createButton.grid(column=0,row=1)
        
        createButton = Button(createButtonsFrame,styleButtons,text='Button',command=lambda:[app.createComponent(self,value='Button')])
        createButton.grid(column=0,row=2)

        createButton = Button(createButtonsFrame,styleButtons,text='Frame',command=lambda:[app.createComponent(self,value='Frame')])
        createButton.grid(column=0,row=3)

        createButton = Button(createButtonsFrame,styleButtons,text='Entry',command=lambda:[app.createComponent(self,value='Entry')])
        createButton.grid(column=0,row=4)

        createButton = Button(createButtonsFrame,styleButtons,text='Listbox',command=lambda:[app.createComponent(self,value='Listbox')])
        createButton.grid(column=0,row=5)


        #Designer Frame
        self.frameDesigner = Frame(self.janela,height=400,width=400)
        self.frameDesigner.grid(column=1,row=0)
        self.windowBG = self.frameDesigner['bg']

        #Frame Left
        self.FrameLeft = Frame(self.janela,styleFrames)
        self.FrameLeft.place(relx=1,anchor='ne')

        #Frame Propriedades
        self.container = Frame(self.FrameLeft,styleFrames)
        self.container.grid(column=0,row=1)

        canvas = Canvas(self.container,bg = '#242526')
        canvas.pack() 

        scrollbar = Scrollbar(self.container, orient="vertical", command=canvas.yview) 
        scrollbar.place(x=int(canvas['width'])-int(scrollbar['width']),y=0,height=canvas['height'])
        

        self.FrameProperties = Frame(canvas,bg = '#242526') 

        self.FrameProperties.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

        canvas.create_window((0, 0), window=self.FrameProperties, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set) 


        #Bottom Buttons
        frameBottomButtons = Frame(self.FrameLeft,styleFrames)
        frameBottomButtons.grid(column=0,row=2)

        self.applyButton = Button(frameBottomButtons,styleButtons,text="apply",command=self.apply)
        self.applyButton.pack()


        #Frame Top Left
        self.FrameTopLeft = Frame(self.FrameLeft,styleFrames)
        self.FrameTopLeft.grid(column=0,row=0)

        #Current Widgets
        self.listboxIndex = 0
        self.listObjectsGUI = Listbox(self.FrameTopLeft,bg = '#242526',fg='white')
        self.listObjectsGUI.grid(column=0,row=0)

        #Frame Widgets editor
        self.frameEditor = Frame(self.FrameTopLeft,styleFrames)
        self.frameEditor.grid(column=1,row=0)

        self.exportButton = Button(self.frameEditor,styleButtons,text="export",fg="#3BB143",command=self.getObjectsExport)
        self.exportButton.grid(column=0,row=0)

        self.deleteButton = Button(self.frameEditor,styleButtons,text="delete",fg="#FF0000",command=self.deleteComponent)
        self.deleteButton.grid(column=0,row=1)

        self.RenameButton = Button(self.frameEditor,styleButtons,text="rename",fg="#FFFFFF",command=self.renameWidgetWindow)
        self.RenameButton.grid(column=0,row=2)

        self.CopyButton = Button(self.frameEditor,styleButtons,text="copy",fg="#FFFFFF",command=lambda:[app.Copy(self,e=None)])
        self.CopyButton.grid(column=0,row=3)


        #Controls
        self.labelMove = Label(self.frameDesigner,text='MOVE')
        self.labelMove.bind('<Button-1>', self.moveObj)
        self.labelMove.bind('<ButtonRelease-1>', self.soltar)

        self.ResizeObjW = Label(self.frameDesigner,text='>')
        self.ResizeObjW.bind('<Button-1>', self.moveObj)
        self.ResizeObjW.bind('<ButtonRelease-1>', self.soltar)

        self.listObjectsGUI.bind('<Control-v>', self.Copy)
        self.janela.bind('<Delete>', lambda event:([app.deleteComponent(self)]))
        self.janela.bind('<Return>', lambda event:([app.apply(self)]))

        self.frameDesigner.bind('<Button-1>', self.clickFrame)

        self.listObjectsGUI.bind('<ButtonRelease-1>',self.listboxCall)
        
        #MenuBar
        menuBar = Menu(self.janela,bg="black",fg="white") #cria menubar

        filemenu = Menu(menuBar, tearoff=0,bg="black",fg="white") 
        filemenu.add_command(label="Open", command=self.importProject)
        filemenu.add_separator()
        filemenu.add_command(label="Exit", command=self.janela.quit)
        
        aboutMenu = Menu(menuBar, tearoff=0,bg="black",fg="white")
        aboutMenu.add_command(label="About", command=self.about)

        compileMenu = Menu(menuBar, tearoff=0,bg="black",fg="white")
        compileMenu.add_command(label="Compile", command=self.compilerWindow)

        self.chooseInterpreter = IntVar(self.janela)   
        self.chooseInterpreter.set(1) 

        interPreterMenu = Menu(menuBar, tearoff=0,bg="white",fg="Black")
        interPreterMenu.add_radiobutton(label="Python",value=1,variable=self.chooseInterpreter)
        interPreterMenu.add_radiobutton(label="exec()",value=2,variable=self.chooseInterpreter)

        menuBar.add_cascade(label="File", menu=filemenu)
        menuBar.add_cascade(label="Compile", menu=compileMenu)
        menuBar.add_cascade(label="Interpreter", menu=interPreterMenu)
        menuBar.add_cascade(label="About", menu=aboutMenu)
        

        self.janela.config(menu=menuBar)

        self.janela.mainloop()


app = app()
